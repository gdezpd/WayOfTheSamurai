const ADD_POST = "ADD-POST"const UPDATE_NEW_POST_TEXT = "UPDATE-NEW-POST-TEXT"const ADD_MESSAGE = "ADD-MESSAGE"const UPDATE_NEW_MESSAGE_TEXT = "UPDATE-NEW-MESSAGE-TEXT"export type PostsArrayType = {    id: number    message: string    likeCount: number}export type ItemArrayType = {    name: string    id: number}export type MessageArrayType = {    message: string,    id: number}type ProfilePageType = {    postsArray: PostsArrayType[]    newPostText: string}type DialogsPageType = {    itemArray: ItemArrayType[],    messageArray: MessageArrayType[]    newMessage: string}export type  RootStateType = {    profilePage: ProfilePageType    dialogsPage: DialogsPageType    sidebar: sidebarType}type sidebarType = {}export type stateType = {    profilePage: {        postsArray: PostsArrayType[]        newPostText: string    },    dialogsPage: {        itemArray: ItemArrayType[],        messageArray: MessageArrayType[],    },    sidebar: {}}export type StoreType = {    _state: RootStateType,    _callSubckriber: () => void,    subscribe: (observer: () => void) => void,    getState: () => RootStateType,    dispatch: (action: ActionsTypes) => void,}export type ActionsTypes =    ReturnType<typeof addPostAC>    | ReturnType<typeof updateNewPostTextAC>    | ReturnType<typeof addMessageAC>    | ReturnType<typeof updateNewMessageTextAC>export const addPostAC = (newPostText: string) => {    return {        type: "ADD-POST",        newPostText: newPostText    } as const}export const updateNewPostTextAC = (newText: string) => {    return {        type: "UPDATE-NEW-POST-TEXT",        newText: newText    } as const}export const addMessageAC = (newMessage: string) => {    return {        type: "ADD-MESSAGE",        newMessage: newMessage    } as const}export const updateNewMessageTextAC = (newMessageText: string) => {    return {        type: UPDATE_NEW_MESSAGE_TEXT,        newMessageText: newMessageText    } as const}export let store: StoreType = {    _state: {        profilePage: {            postsArray: [                {id: 1, message: 'Hi, how are you?', likeCount: 20},                {id: 2, message: 'It\'s my first post', likeCount: 5}            ],            newPostText: 'it-kamasutra'        },        dialogsPage: {            itemArray: [                {name: 'Seva', id: 1},                {name: 'Evgenya', id: 2},                {name: 'Slava', id: 3},                {name: 'Anya', id: 4},                {name: 'Sveta', id: 5},                {name: 'Roman', id: 6}            ],            messageArray: [                {message: 'Hi', id: 1},                {message: 'What you name', id: 2},                {message: 'Poshel Naher', id: 3},                {message: 'Ok', id: 4},            ],            newMessage: ''        },        sidebar: {}    },    _callSubckriber() {        console.log('State changet')    },    getState() {        return this._state    },    subscribe(observer) {        this._callSubckriber = observer;    },    dispatch(action) {        console.log(action)        if (action.type === ADD_POST) {            const newPost = {                id: 3,                message: this._state.profilePage.newPostText,                likeCount: 0,            }            this._state.profilePage.postsArray.push(newPost);            this._state.profilePage.newPostText = '';            this._callSubckriber();        } else if (action.type === UPDATE_NEW_POST_TEXT) {            this._state.profilePage.newPostText = action.newText            this._callSubckriber()        } else if (action.type === ADD_MESSAGE) {            const newMessage = {                message: this._state.dialogsPage.newMessage,                id: 5            }            this._state.dialogsPage.messageArray.push(newMessage);            this._state.dialogsPage.newMessage = '';            this._callSubckriber();        } else if (action.type === UPDATE_NEW_MESSAGE_TEXT) {            this._state.dialogsPage.newMessage = action.newMessageText            console.log(action)            this._callSubckriber()        }    }}